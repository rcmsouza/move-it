{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/rcsou/src/rocketseat/reactjs/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelup() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengesIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengesIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelup: levelup,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/rcsou/src/rocketseat/reactjs/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelup","startNewChallenge","randomChallengesIndex","Math","floor","random","length","challenge","resetChallenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAqBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC9CJ,QAAQ,CAAC,CAAD,CADsC;AAAA,MACjEK,KADiE;AAAA,MAC1DC,QAD0D;;AAAA,mBAEtBN,QAAQ,CAAC,CAAD,CAFc;AAAA,MAEjEO,iBAFiE;AAAA,MAE9CC,oBAF8C;;AAAA,mBAGlBR,QAAQ,CAAC,CAAD,CAHU;AAAA,MAGjES,mBAHiE;AAAA,MAG5CC,sBAH4C;;AAAA,mBAK1BV,QAAQ,CAAC,IAAD,CALkB;AAAA,MAKjEW,eALiE;AAAA,MAKhDC,kBALgD;;AAOxE,WAASC,OAAT,GAAmB;AACjBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASS,iBAAT,GAA6B;AAC3B,QAAMC,qBAAqB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA9B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,qBAAD,CAA5B;AACAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AACD,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLP,MAAAA,KAAK,EAALA,KADK;AAELE,MAAAA,iBAAiB,EAAjBA,iBAFK;AAGLE,MAAAA,mBAAmB,EAAnBA,mBAHK;AAILI,MAAAA,OAAO,EAAPA,OAJK;AAKLC,MAAAA,iBAAiB,EAAjBA,iBALK;AAMLH,MAAAA,eAAe,EAAfA;AANK,KADT;AAAA,cAUGP;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAlCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useState } from 'react'\nimport challenges from '../../challenges.json'\n\ninterface Challenge {\n  type: 'body' | 'eye'\n  description: string\n  amount: number\n}\n\ninterface ChallengesContextData {\n  level: number\n  currentExperience: number\n  challengesCompleted: number\n  levelup: () => void\n  startNewChallenge: () => void\n  activeChallenge: Challenge\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData)\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(1)\n  const [currentExperience, setCurrentExperience] = useState(0)\n  const [challengesCompleted, setChallengesCompleted] = useState(0)\n\n  const [activeChallenge, setActiveChallenge] = useState(null)\n\n  function levelup() {\n    setLevel(level + 1)\n  }\n\n  function startNewChallenge() {\n    const randomChallengesIndex = Math.floor(Math.random() * challenges.length)\n    const challenge = challenges[randomChallengesIndex]\n    setActiveChallenge(challenge)\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null)\n  }\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        challengesCompleted,\n        levelup,\n        startNewChallenge,\n        activeChallenge,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}